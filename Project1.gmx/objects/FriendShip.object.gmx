<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ShipFriend_sp</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pl_ship = instance_nearest(x, y, PlayerShip);
dist = 40;
sp = 5;

index = pl_ship.followers + 1;
with pl_ship
{
    followers++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>followed_pos_x = cos(degtorad(pl_ship.image_angle + 90)) * (index * dist - pl_ship.followers * dist / 2 - dist / 2) + pl_ship.x + sin(degtorad(pl_ship.image_angle + 90)) * -50;
followed_pos_y = -sin(degtorad(pl_ship.image_angle + 90)) * (index * dist - pl_ship.followers * dist / 2 - dist / 2) + pl_ship.y + cos(degtorad(pl_ship.image_angle + 90)) * -50;
if (point_distance(x, y, followed_pos_x, followed_pos_y) &gt; 10)
{
    sp = 5;
    move_towards_point(followed_pos_x, followed_pos_y, sp);
    image_angle = point_direction(x, y, followed_pos_x, followed_pos_y);
}
else
{
    sp = sp / 1.5;
    move_towards_point(followed_pos_x, followed_pos_y, sp);
}

if (point_distance(x, y, followed_pos_x, followed_pos_y) &lt;= 15)
{
    image_angle = pl_ship.image_angle;
}

shoot();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
