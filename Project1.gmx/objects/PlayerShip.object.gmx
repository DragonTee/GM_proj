<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ship_sp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initializing
fric = 0.9;
acc = 0.5;
bacc = 0.1;
hsp = 0;
vsp = 0;
rot_sp = 3;
followers = 0;
zoom = view_wview[0];
zoom_max = 8;
zoom_min = 0.5;
global.battle_distance = 25;
global.battle_offset = 100;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>EPS = 0.001;
if (room = Space_system_room || room = Space_battle_room) //if not in menu
{
//rotation
if (keyboard_check(ord("A")))
{
    image_angle += rot_sp;
}

if (keyboard_check(ord("D")))
{
    image_angle -= rot_sp;
}

d = degtorad(image_angle);
//movement
if (keyboard_check(ord("W")))
{
    hsp += cos(d) * acc;
    vsp -= sin(d) * acc;
}

if (abs(hsp) &gt; EPS)
{
    hsp *= fric;
}
if (abs(vsp) &gt; EPS)
{
    vsp *= fric;
}
//collision
if (place_meeting(x + hsp, y + vsp, Block_obj))
{
    s = max(hsp, vsp);
    while (!place_meeting(x + sign(x) * s, y + sign(y) * s, Block_obj))
    {
        x += sign(x) * s;
        y += sign(y) * s;   
    }
}
else
{
    x += hsp;
    y += vsp;
}
//shooting
if (mouse_check_button(mb_left))
{
    with instance_create(x, y, bullet)
    {
        sp = 25 + random(5) - 2.5;
        motion_add(other.image_angle, sp);
    }
}
//zooming
if (mouse_wheel_up() &amp;&amp; (view_wview[0] * 0.5) / zoom &gt;= zoom_min)
{
    view_wview[0] *= 0.5;
    view_hview[0] *= 0.5;
    background_xscale[0] *= 0.5 / 0.99;
    background_yscale[0] *= 0.5 / 0.99;
    }

if (mouse_wheel_down() &amp;&amp; (view_wview[0] * 2) / zoom &lt;= zoom_max)
{
    view_wview[0] *= 2;
    view_hview[0] *= 2;
    background_xscale[0] *= 2 * 0.99;
    background_yscale[0] *= 2 * 0.99;}
//entering the battle
if (instance_exists(instance_nearest(x, y, EnemyFleet)))
{
    if (point_distance(x, y, instance_nearest(x, y, EnemyFleet).x, instance_nearest(x, y, EnemyFleet).y) &lt;= global.battle_distance)
    {
        global.system_room = room;
        global.enemy = instance_nearest(x, y, EnemyFleet);
        global.battle_angle = point_direction(x, y, global.enemy.x, global.enemy.y);
        global.battle_fleet1_angle = image_angle;
        with instance_nearest(x, y, EnemyFleet)
        {
            global.battle_fleet2_angle = image_angle;
        }
        global.battle_space_type = "space";
        room_goto(Space_battle_room);
    }
}
//enter fleet setup screen
if (keyboard_check_pressed(ord("G")))
{
    global.system_room = room;
    room_goto(Fleet_setup_room);
}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
