<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = noone;
can_fire = 0;
offset_x = global.turret_x;
offset_y = global.turret_y;
rotation_offset = 0;
parent = global.turret_parent;
name = global.turret_name;
ini_open('Turrets.ini');
sprite = asset_get_index(ini_read_string(name, 'sprite', '0'));
damage = ini_read_real(name, 'damage', 0);
rof = ini_read_real(name, 'rof', 1);
velocity = ini_read_real(name, 'velocity', 1);
rotation_speed = ini_read_real(name, 'rotation_speed', 1);
range = ini_read_real(name, 'range', 1);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = parent.x + offset_x * cos(degtorad(parent.image_angle)) + offset_y * sin(degtorad(parent.image_angle));
y = parent.y - offset_x * sin(degtorad(parent.image_angle)) + offset_y * cos(degtorad(parent.image_angle));
if(target != noone &amp;&amp; point_distance(x, y, target.x, target.y) &gt; range)
    target = noone;
if(target == noone)
{
    if(instance_exists(Ship_big_e) &amp;&amp; point_distance(x, y, instance_nearest(x, y, Ship_big_e).x, instance_nearest(x, y, Ship_big_e).y) &lt;= range)
    {  
        target = instance_nearest(x, y, Ship_big_e);
    }
    else
    if(instance_exists(Ship_medium_e) &amp;&amp; point_distance(x, y, instance_nearest(x, y, Ship_medium_e).x, instance_nearest(x, y, Ship_medium_e).y) &lt;= range)
    {  
        target = instance_nearest(x, y, Ship_medium_e);
    }
    else
    if(instance_exists(Ship_small_e) &amp;&amp; point_distance(x, y, instance_nearest(x, y, Ship_small_e).x, instance_nearest(x, y, Ship_small_e).y) &lt;= range)
    {  
        target = instance_nearest(x, y, Ship_small_e);
    }
}
//aiming
if(target != noone)
{
    if(point_distance(x, y, target.x, target.y) &lt;= range)
    {
        if(abs(image_angle % 360 - point_direction(x, y, target.x, target.y) % 360) &lt; rotation_speed)
        {
            rotation = abs(image_angle % 360 - point_direction(x, y, target.x, target.y) % 360) / rotation_speed;
        }
        else
        {
            rotation = rotation_speed;
        }
        if((image_angle - point_direction(x, y, target.x, target.y) + 360) % 360 &lt; 180)
        {
            rotation_offset = rotation_offset % 360 - rotation;
            if (rotation_offset &lt; 0)
            {
                    rotation_offset += 360;
            }
        }
        else
        {
                rotation_offset = rotation_offset % 360 + rotation;
        }      
    }
}
//shooting
if(target != noone &amp;&amp; point_distance(x, y, target.x, target.y) &lt;= range &amp;&amp; abs(image_angle % 360 - point_direction(x, y, target.x, target.y) % 360) &lt; 4)
{
    if (can_fire == 0)
    {
        with instance_create(x, y, Turret_projectile)
        {
            d = other.image_angle;
            spd = other.velocity;
            damage = other.damage;
        }
        can_fire = rof;
    }
    else
        can_fire--;
}

image_angle = parent.image_angle + rotation_offset;
target = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite, 0, x, y, 1, 1, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
