<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//loading player ship
ship[0] = instance_create(room_width / 2, room_height / 2, PlayerShip);
//loading fleet
ini_open('fleet.ini');
global.ship_count = ini_read_real('Fleet', 'ship_count', 0);
for(global.index = 1; global.index &lt;= global.ship_count; global.index++)
{
    ind = string(global.index);
    global.ship_obj = asset_get_index(ini_read_string(ind, 'ship', 0));
    global.ship_x = ini_read_real(ind, 'x', 0);
    global.ship_y = ini_read_real(ind, 'y', 0);
    global.ship_name = ini_read_string(ind, 'name', '0');
    ship[ind] = instance_create(room_width / 2 + global.ship_x, room_height / 2 + global.ship_y, global.ship_obj);
    with ship[ind]
        name = global.ship_name;
}
ini_close();
//initializing varibles
is_dragging = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((keyboard_check_pressed(ord("G"))) or (keyboard_check_pressed(vk_escape)))
{
    ini_open('fleet.ini')
    for(global.index = 1; global.index &lt;= global.ship_count; global.index++)
    {
        ind = string(global.index);
        ini_write_real(ind, 'x', ship[global.index].x - ship[0].x);
        ini_write_real(ind, 'y', ship[global.index].y - ship[0].y);
        ini_write_string(ind, 'name', ship[global.index].name);
    }
    ini_close();
    room_goto(global.system_room);
} 
//dragging ships
if(mouse_check_button(mb_left))
{
    with(instance_position(mouse_x, mouse_y, all))
    {
        if(object_get_name(object_index) != 'PlayerShip')
        {
            other.is_dragging = 1;
            other.dragged_object = id;
        }
    }
}
else
{
    is_dragging = 0;
}
if(is_dragging == 1)
{
    dragged_object.prev_x = dragged_object.x;
    dragged_object.prev_y = dragged_object.y;
    with dragged_object
    {
        if(!place_meeting(mouse_x, mouse_y, all))
        {
            x = mouse_x;
            y = mouse_y;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0,5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0,100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0,100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0,100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0,200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
